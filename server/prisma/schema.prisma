generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                  @id @default(cuid())
  firstName             String
  lastName              String
  email                 String                  @unique
  birthdate             DateTime
  password              String
  role                  Role
  clubOwned             Club?                   @relation("ClubOwner")
  clubId                String?
  club                  Club?                   @relation("ClubMembers", fields: [clubId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Tournament            Tournament[]
  TournamentParticipant TournamentParticipant[]
  Message               Message[]
  MessageRecipient      MessageRecipient[]
}

model Club {
  id         String       @id @default(cuid())
  name       String       @unique
  ownerId    String       @unique
  owner      User         @relation("ClubOwner", fields: [ownerId], references: [id])
  members    User[]       @relation("ClubMembers")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Tournament Tournament[]
}

enum Role {
  CHESS_PLAYER
  COORDINATOR
}

model Tournament {
  id            String                  @id @default(cuid())
  title         String
  description   String
  datetime      DateTime
  rounds        Int
  clubId        String
  club          Club                    @relation(fields: [clubId], references: [id], onDelete: Cascade)
  coordinatorId String
  coordinator   User                    @relation(fields: [coordinatorId], references: [id], onDelete: Cascade)
  participants  TournamentParticipant[]
  results       TournamentResult[]
  status        TournamentStatus        @default(SCHEDULED)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}

model TournamentParticipant {
  id               String             @id @default(cuid())
  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournamentId     String
  tournament       Tournament         @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  TournamentResult TournamentResult[]
}

model TournamentResult {
  id            String                @id @default(cuid())
  participantId String
  participant   TournamentParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  gamesPlayed   Int
  wins          Int
  draws         Int
  losses        Int
  rating        Int?
  Tournament    Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId  String?
}

enum TournamentStatus {
  SCHEDULED
  ACTIVE
  FINISHED
}

model Message {
  id          String             @id @default(cuid())
  subject     String
  body        String
  senderId    String
  sender      User               @relation(fields: [senderId], references: [id], onDelete: Cascade)
  recipients  MessageRecipient[]
  isForwarded Boolean            @default(false)
  isDraft     Boolean            @default(false)
  isDeleted   Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model MessageRecipient {
  id          String  @id @default(cuid())
  messageId   String
  message     Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  recipientId String
  recipient   User    @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  isRead      Boolean @default(false)
  isArchived  Boolean @default(false)
  isDeleted   Boolean @default(false)
  isSaved     Boolean @default(false)
}
